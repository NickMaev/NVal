{"version":3,"sources":["..\\webpack/universalModuleDefinition","..\\webpack/bootstrap","..\\./src/FieldType.ts","..\\./src/ValidationResult.ts","..\\./src/Field.ts","..\\./src/RuleSearchList.ts","..\\./src/NVal.ts","..\\./src/Util.ts","..\\./index.ts","..\\./src/FieldTagTypeList.ts","..\\./src/Constants.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FieldType","ValidationResult","createError","elements","errorMessage","result","message","isValid","createOk","ValidationResult_1","Field","fieldType","firstError","activeRules","rules","filter","x","isActive","length","ruleWrapper","validationResult","instance","apply","errorRuleName","FieldType_1","Util_1","ruleSearchList","fieldTypes","Text","Password","Textarea","Number","Email","val","tryGetValue","isNullOrEmpty","trim","Select","element","selectedOption","Array","from","options","selected","getAttribute","minLength","parseInt","dataset","replace","toString","maxLength","Checkbox","Radio","map","checked","min","getNumberFromAttrOrDefault","max","numValue","parseFloat","match","Field_1","RuleSearchList_1","FieldTagTypeList_1","Constants_1","NVal","htmlFormElement","fields","slice","eventFunctions","initFields","initEvents","hideErrors","showError","isValidElement","htmlElement","field","getFieldByElement","console","log","_this","fieldTagTypeList","forEach","tagType","nodeList","querySelectorAll","tag","type","sameNameDict","nodeListToArray","el","undefined","push","f","elGrp","_a","getAssignedRuleFromAttributes","inputElements","order","indexOf","sort","a","b","fn","event","addEventListener","removeEvents","ef","removeEventListener","assignedRules","dataSet","__assign","ruleKey","ruleName","toLowerCase","ruleSearchItem","valValue","toggleFlag","assignedRule","getErrorPlacementContainers","errorPlacementTag","substr","document","getElementById","getElementsByTagName","classList","add","Constants","ValidationErrorClassName","ec","innerHTML","ErrorMessageClassName","remove","destroy","addRules","items","assignRules","assignExistingRule","inputTag","fieldTagType","toggleRule","rule","attrName","defaultValue","__webpack_exports__","_src_NVal__WEBPACK_IMPORTED_MODULE_0__","_src_ValidationResult__WEBPACK_IMPORTED_MODULE_1__","_src_Field__WEBPACK_IMPORTED_MODULE_2__","_src_FieldType__WEBPACK_IMPORTED_MODULE_3__","_src_IAssignedRule__WEBPACK_IMPORTED_MODULE_4__","_src_IRuleSearchItem__WEBPACK_IMPORTED_MODULE_5__","_src_IRuleInstance__WEBPACK_IMPORTED_MODULE_6__","_src_RuleSearchList__WEBPACK_IMPORTED_MODULE_7__","File"],"mappings":"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","file":"nval.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NVal\"] = factory();\n\telse\n\t\troot[\"NVal\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","\r\nexport enum FieldType {\r\n    Text,\r\n    Password,\r\n    Number,\r\n    Email,\r\n    Textarea,\r\n    File,\r\n    Checkbox,\r\n    Radio,\r\n    Select\r\n}\r\n","export class ValidationResult {\r\n    public message: string;\r\n    public isValid: boolean;\r\n    public elements: HTMLElement[];\r\n    public errorRuleName: string;\r\n\r\n    public static createError(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.message = errorMessage;\r\n        result.elements = elements;\r\n        result.isValid = false;\r\n        return result;\r\n    }\r\n\r\n    public static createOk(elements: HTMLElement[]): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.isValid = true;\r\n        result.elements = elements;\r\n        return result;\r\n    }\r\n}\r\n","import { ValidationResult } from \"./ValidationResult\";\r\nimport {IAssignedRule} from \"./IAssignedRule\";\r\nimport {FieldType} from \"./FieldType\";\r\n\r\n/**\r\n * Field which includes one or more elements.\r\n */\r\nexport class Field {\r\n    /**\r\n     * Order of the element in the DOM.\r\n     */\r\n    public order: number;\r\n    /**\r\n     * One or more elements (> 1 in case of the same name group: checkboxes, radios).\r\n     */\r\n    public elements: HTMLElement[] = [];\r\n\r\n\r\n    public fieldType: FieldType;\r\n\r\n    /**\r\n     * Assigned rules.\r\n     */\r\n    public rules: IAssignedRule[];\r\n\r\n    constructor(fieldType: FieldType) {\r\n        this.fieldType = fieldType;\r\n    }\r\n\r\n    /**\r\n     * Validate field which includes one or more elements.\r\n     */\r\n    public isValid(): ValidationResult {\r\n        var activeRules = this.rules.filter(x => x.isActive);\r\n        if (activeRules.length === 0)\r\n            return ValidationResult.createOk(this.elements);\r\n        \r\n        var firstError: ValidationResult;\r\n\r\n        for (var i = 0; i < activeRules.length; i++) {\r\n            var ruleWrapper = activeRules[i];\r\n            var errorMessage = ruleWrapper.errorMessage;\r\n            var validationResult = ruleWrapper.instance.apply(this.elements, errorMessage);\r\n            validationResult.errorRuleName = ruleWrapper.instance.name;\r\n            if (!validationResult.isValid) {\r\n                firstError = validationResult;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (firstError != null)\r\n            return firstError;\r\n\r\n        return ValidationResult.createOk(this.elements);\r\n    }\r\n}\r\n","import { FieldType } from \"./FieldType\";\r\nimport { tryGetValue, getNumberFromAttrOrDefault, isNullOrEmpty } from \"./Util\";\r\nimport { ValidationResult } from \"./ValidationResult\";\r\nimport { IRuleSearchItem } from \"./IRuleSearchItem\";\r\n\r\nexport const ruleSearchList: IRuleSearchItem[] = [\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Number, FieldType.Email],\r\n        instance: {\r\n            name: \"required\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var val = tryGetValue(elements[0]);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createError(elements, errorMessage);\r\n                val = val.trim();\r\n                var isValid = val !== \"\";\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Select],\r\n        instance: {\r\n            name: \"required\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0] as any;\r\n                var val = null;\r\n                var selectedOption = (Array as any).from(element.options).filter(x => x.selected)[0];\r\n                if (selectedOption) {\r\n                    val = selectedOption.getAttribute(\"value\");\r\n                }\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createError(elements, errorMessage);\r\n                val = val.trim();\r\n                var isValid = val !== \"\";\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Email],\r\n        instance: {\r\n            name: \"minlength\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                val = val.trim();\r\n                var minLength = parseInt(element.dataset[\"valMinlength\"] || 0 as any);\r\n                var isValid = val.length >= minLength;\r\n                if(!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", minLength.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Email],\r\n        instance: {\r\n            name: \"maxlength\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                val = val.trim();\r\n                var maxLength = parseInt(element.dataset[\"valMaxlength\"] || 0 as any);\r\n                var isValid = val.length <= maxLength;\r\n                if(!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", maxLength.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Checkbox, FieldType.Radio],\r\n        instance: {\r\n            name: \"required\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var isValid = elements.map((x: any) => x.checked).filter((x: boolean) => x).length > 0;\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"range\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n                var max = getNumberFromAttrOrDefault(element, \"max\", 9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = min <= numValue && numValue <= max;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", min.toString()).replace(\"{1}\", max.toString());            \r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"min\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = min <= numValue;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", min.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"max\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var max = getNumberFromAttrOrDefault(element, \"min\", 9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = numValue <= max;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", max.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },    \r\n    {\r\n        fieldTypes: [FieldType.Email],\r\n        instance: {\r\n            name: \"email\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n\r\n                var rx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                var isValid = val.match(rx) != null;\r\n\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    }\r\n];","import { Field } from \"./Field\";\r\nimport { IAssignedRule } from \"./IAssignedRule\";\r\nimport { ruleSearchList } from \"./RuleSearchList\";\r\nimport { fieldTagTypeList } from \"./FieldTagTypeList\";\r\nimport { FieldType } from \"./FieldType\";\r\nimport { ValidationResult } from \"./ValidationResult\";\r\nimport { Constants } from \"./Constants\";\r\nimport { nodeListToArray, isNullOrEmpty } from \"./Util\";\r\nimport { IRuleInstance } from \"./IRuleInstance\";\r\nimport { IRuleSearchItem } from \"./IRuleSearchItem\";\r\n\r\nexport class NVal {\r\n    protected element: HTMLFormElement;\r\n\r\n    protected fields: Field[] = [];\r\n\r\n    protected ruleSearchList: IRuleSearchItem[] = [...ruleSearchList];\r\n\r\n    /**\r\n     * Validate form.\r\n     */\r\n    public isValid(): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n        for (var i = 0; i < this.fields.length; i++) {\r\n            var validationResult = this.fields[i].isValid();\r\n            if (!validationResult.isValid) {\r\n                this.showError(validationResult);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate element.\r\n     * @param htmlElement\r\n     */\r\n    public isValidElement(htmlElement: HTMLElement): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal+isValidElement: field not found.\");\r\n            return true;\r\n        }\r\n\r\n        var validationResult = field.isValid();\r\n        if (!validationResult.isValid) {\r\n            this.showError(validationResult);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    constructor(htmlFormElement: HTMLFormElement) {\r\n\r\n        this.element = htmlFormElement;\r\n\r\n        this.initFields(htmlFormElement);\r\n        this.initEvents();\r\n    }\r\n\r\n    protected initFields(htmlFormElement: HTMLFormElement): void {\r\n        var self = this;\r\n\r\n        this.fields = [];\r\n\r\n        fieldTagTypeList.forEach(tagType => {\r\n            var nodeList = htmlFormElement.querySelectorAll(tagType.tag);\r\n\r\n            if (tagType.type === FieldType.Radio || tagType.type === FieldType.Checkbox) {\r\n                var sameNameDict = [];\r\n                var elements = nodeListToArray(nodeList);\r\n                elements.forEach(el => {\r\n                    var name = (el as any).name;\r\n                    if (sameNameDict[name] === undefined) {\r\n                        sameNameDict[name] = [];\r\n                    }\r\n                    sameNameDict[name].push(el);\r\n                });\r\n\r\n                for (var key in sameNameDict) {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    var elGrp = sameNameDict[key];\r\n                    f.elements.push(...elGrp);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getAssignedRuleFromAttributes(tagType.type, f.elements[0]);\r\n\r\n                    self.fields.push(f);\r\n                }\r\n            } else {\r\n                var elements = Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n                elements.forEach(el => {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    f.elements.push(el);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getAssignedRuleFromAttributes(tagType.type, el);\r\n\r\n                    self.fields.push(f);\r\n                });\r\n            }\r\n        });\r\n\r\n        var inputElements = nodeListToArray(htmlFormElement.querySelectorAll('input, select, textarea'));\r\n        this.fields.forEach(field => {\r\n            field.order = inputElements.indexOf(field.elements[0]);\r\n        });\r\n        this.fields = this.fields.sort((a, b) => a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Need for delete events.\r\n     */\r\n    protected eventFunctions: any[] = [];\r\n\r\n    protected initEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                var fn = (event) => {\r\n                    self.isValidElement(el);\r\n                };\r\n                self.eventFunctions.push(fn);\r\n                el.addEventListener(\"change\", fn);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected removeEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                self.eventFunctions.forEach(ef => {\r\n                    el.removeEventListener(\"change\", ef);\r\n                });\r\n            });\r\n        });\r\n        this.eventFunctions = [];\r\n    }\r\n\r\n    protected getAssignedRuleFromAttributes(fieldType: FieldType, htmlElement: HTMLElement): IAssignedRule[] {\r\n\r\n        var self = this;\r\n\r\n        var assignedRules: IAssignedRule[] = [];\r\n\r\n        var dataSet = { ...htmlElement.dataset };\r\n\r\n        // Set element type rule.\r\n        dataSet[`val${htmlElement.getAttribute(\"type\")}`] = \"true\";\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab the rules here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n\r\n                if (key.indexOf(\"val\") !== 0) {\r\n                    // If it's not validation attribute, skip it.\r\n                    continue;\r\n                }\r\n\r\n                var ruleKey = key.replace(\"val\", \"\");\r\n\r\n                var ruleName = ruleKey.toLowerCase();\r\n                if (ruleName === \"\") {\r\n                    continue;\r\n                }\r\n\r\n                var ruleSearchItem = self.ruleSearchList.filter(x => x.instance.name === ruleName && x.fieldTypes.indexOf(fieldType) > -1)[0];\r\n                if (ruleSearchItem == null) {\r\n                    continue;\r\n                }\r\n\r\n                var isActive = false;\r\n\r\n                // \"valValue\" may contain activity flag or value for the rule.\r\n                var valValue = dataSet[key].toLowerCase();\r\n\r\n                var toggleFlag = dataSet[`valToggle${ruleKey}`];\r\n\r\n                var isValValueFlag = (valValue == \"true\" || valValue == \"false\");\r\n                if (isValValueFlag) {\r\n                    isActive = valValue == \"true\";\r\n                } else {\r\n\r\n                    // Use the \"toggleFlag\".\r\n\r\n                    if (toggleFlag == null) {\r\n                        // If toggle flag is null, make rule active.\r\n                        isActive = true;\r\n                    }\r\n                }\r\n\r\n                if (toggleFlag != null) {\r\n                    toggleFlag = toggleFlag.toLowerCase();\r\n                    isActive = toggleFlag == \"true\";\r\n                }\r\n\r\n                var assignedRule: IAssignedRule = {\r\n                    isActive: isActive,\r\n                    instance: ruleSearchItem.instance,\r\n                    errorMessage: \"\"\r\n                };\r\n\r\n                if (assignedRules != null) {\r\n                    assignedRules.push(assignedRule);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab error messages here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n                if (key.indexOf(\"msg\") === 0) {\r\n\r\n                    var ruleName = key.replace(\"msg\", \"\").toLowerCase();\r\n                    var assignedRule = assignedRules.filter(x => x.instance.name === ruleName)[0];\r\n                    if (assignedRule != null) {\r\n                        assignedRule.errorMessage = htmlElement.getAttribute(`data-msg-${ruleName}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return assignedRules;\r\n    }\r\n    \r\n    protected getErrorPlacementContainers(element: HTMLElement): HTMLElement[] {\r\n        var errorPlacementTag = element.dataset[\"error\"];\r\n\r\n        if (errorPlacementTag != null) {\r\n            if (errorPlacementTag[0] === \"#\") {\r\n\r\n                errorPlacementTag = errorPlacementTag.substr(1);\r\n\r\n                var errorPlacementElement = document.getElementById(errorPlacementTag);\r\n\r\n                if (errorPlacementElement == null) {\r\n                    throw `NVal+getErrorPlacementContainers: error placement element with id '#${errorPlacementTag}' not found.`;\r\n                    return [];\r\n                }\r\n\r\n                return [document.getElementById(errorPlacementTag)];\r\n            }\r\n            return nodeListToArray(document.getElementsByTagName(errorPlacementTag) as any);\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    protected showError(validationResult: ValidationResult): void {\r\n        validationResult.elements.forEach(el => {\r\n            el.classList.add(Constants.ValidationErrorClassName);\r\n        });\r\n\r\n        this.getErrorPlacementContainers(validationResult.elements[0]).forEach(ec => {\r\n            if (ec != null) {\r\n                if (isNullOrEmpty(validationResult.message)) {\r\n                    validationResult.message = `There are no message for the '${validationResult.errorRuleName}' rule.`;\r\n                }\r\n                ec.innerHTML =\r\n                    `<span class=\"${Constants.ErrorMessageClassName}\">${validationResult.message}</span>`;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected hideErrors(fields: Field[]) {\r\n        fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                el.classList.remove(Constants.ValidationErrorClassName);\r\n                this.getErrorPlacementContainers(el).forEach(ec => {\r\n                    if (ec != null) {\r\n                        ec.innerHTML = \"\";\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public destroy() {\r\n        this.hideErrors(this.fields);\r\n        this.removeEvents();\r\n        this.fields = [];\r\n        this.element = null;\r\n    }\r\n\r\n    public addRules(items: IRuleSearchItem[]): void {\r\n        this.ruleSearchList.push(...items);\r\n        this.fields = [];\r\n        this.initFields(this.element);\r\n    }\r\n\r\n    public assignRules(htmlElement: HTMLElement, assignedRules: IAssignedRule[]): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            throw \"NVal+assignRules: can't find HTML element for assign the rule.\";\r\n        }\r\n        field.rules.push(...assignedRules);\r\n    }\r\n\r\n    public assignExistingRule(htmlElement: HTMLElement, ruleName: string, errorMessage: string): void {\r\n        if (htmlElement == null) {\r\n            throw \"NVal+assignExistingRule: can't assign existing rule to 'null'.\";\r\n        }\r\n        var inputTag = `input[type=${htmlElement.getAttribute(\"type\")}]`;\r\n        var fieldTagType = fieldTagTypeList.filter(x => x.tag === inputTag)[0];\r\n        if (fieldTagType == null) {\r\n            throw `NVal+assignExistingRule: unrecognizable field tag type '${inputTag}'.`;\r\n        }\r\n        var fieldType = fieldTagType.type;\r\n        var ruleSearchItem = this.ruleSearchList.filter(x => x.fieldTypes.indexOf(fieldType) > -1 && x.instance.name === ruleName)[0];\r\n        if (ruleSearchItem == null) {\r\n            throw `NVal+assignExistingRule: can't find rule with name '${ruleName}' for the field type '${fieldType}'!`;\r\n        }\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            throw \"NVal+assignExistingRule: can't find HTML element for assign the rule.\";\r\n        }\r\n        field.rules.push({\r\n            instance: ruleSearchItem.instance,\r\n            errorMessage: errorMessage,\r\n            isActive: true\r\n        });\r\n    }\r\n\r\n    public toggleRule(htmlElement: HTMLElement, ruleName: string, isActive: boolean): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal+toggleRule: field not found.\");\r\n            return;\r\n        }\r\n        var rule = field.rules.filter(x => x.instance.name === ruleName)[0];\r\n        if (rule == null) {\r\n            console.log(`NVal+toggleRule: rule with name ${ruleName} not found.`);\r\n            return;\r\n        }\r\n        rule.isActive = isActive;\r\n    }\r\n\r\n    protected getFieldByElement(htmlElement: HTMLElement): Field {\r\n        return this.fields.filter(x => x.elements.indexOf(htmlElement) > -1)[0];\r\n    }\r\n}\r\n","export const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}\r\n\r\nexport const tryGetValue = (element: HTMLElement): any => {\r\n    var val = (element as any).value;\r\n    return val;\r\n}\r\n\r\nexport const getNumberFromAttrOrDefault = (element: HTMLElement, attrName: string, defaultValue: number): number => {\r\n    return parseFloat(element.getAttribute(attrName) || defaultValue as any);\r\n}\r\n\r\nexport const isNullOrEmpty = (value: any): boolean => {\r\n    return value == null || value === \"\";\r\n}\r\n","﻿export { NVal } from \"./src/NVal\";\r\nexport { ValidationResult } from \"./src/ValidationResult\";\r\nexport { Field } from \"./src/Field\";\r\nexport { FieldType } from \"./src/FieldType\";\r\nexport { IAssignedRule } from \"./src/IAssignedRule\";\r\nexport { IRuleSearchItem } from \"./src/IRuleSearchItem\";\r\nexport { IRuleInstance } from \"./src/IRuleInstance\";\r\nexport { ruleSearchList } from \"./src/RuleSearchList\";","import {FieldType} from \"./FieldType\";\r\nimport {IFieldTagTypePair} from \"./IFieldTagTypePair\";\r\n\r\n/**\r\n * Field and tag pair list.\r\n */\r\nexport const fieldTagTypeList: IFieldTagTypePair[] = [\r\n    {\r\n        tag: \"input[type=password]\",\r\n        type: FieldType.Password\r\n    },\r\n    {\r\n        tag: \"input[type=checkbox]\",\r\n        type: FieldType.Checkbox\r\n    },\r\n    {\r\n        tag: \"input[type=radio]\",\r\n        type: FieldType.Radio\r\n    },\r\n    {\r\n        tag: \"input[type=text]\",\r\n        type: FieldType.Text\r\n    },\r\n    {\r\n        tag: \"input[type=email]\",\r\n        type: FieldType.Email\r\n    },\r\n    {\r\n        tag: \"input[type=file]\",\r\n        type: FieldType.File\r\n    },\r\n    {\r\n        tag: \"input[type=number]\",\r\n        type: FieldType.Number\r\n    },\r\n    {\r\n        tag: \"select\",\r\n        type: FieldType.Select\r\n    },\r\n    {\r\n        tag: \"textarea\",\r\n        type: FieldType.Textarea\r\n    }];\r\n","export enum Constants {\r\n    MessageAttrSuffix = \"msg\",\r\n    ValidationErrorClassName = \"validation-error\",\r\n    ErrorMessageClassName = \"error-message\"\r\n}\r\n"],"sourceRoot":""}