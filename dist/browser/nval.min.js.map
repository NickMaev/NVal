{"version":3,"sources":["..\\webpack/universalModuleDefinition","..\\webpack/bootstrap","..\\./src/FieldType.ts","..\\./src/ValidationResult.ts","..\\./src/Field.ts","..\\./src/RuleSearchList.ts","..\\./src/NVal.ts","..\\./src/Util.ts","..\\./index.ts","..\\./src/FieldTagTypeList.ts","..\\./src/Constants.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","FieldType","ValidationResult","createError","elements","errorMessage","result","message","isValid","createOk","ValidationResult_1","Field","fieldType","firstError","activeRules","rules","filter","x","isActive","length","ruleWrapper","validationResult","instance","apply","errorRuleName","FieldType_1","Util_1","ruleSearchList","fieldTypes","Text","Password","Textarea","Select","Number","Email","val","tryGetValue","isNullOrEmpty","trim","element","minLength","parseInt","dataset","replace","toString","maxLength","Checkbox","Radio","map","checked","min","getNumberFromAttrOrDefault","max","numValue","parseFloat","match","Field_1","RuleSearchList_1","FieldTagTypeList_1","Constants_1","NVal","htmlFormElement","fields","slice","eventFunctions","initFields","initEvents","hideErrors","showError","isValidElement","htmlElement","field","getFieldByElement","console","log","_this","fieldTagTypeList","forEach","tagType","nodeList","querySelectorAll","tag","type","sameNameDict","nodeListToArray","el","undefined","push","f","elGrp","_a","getAssignedRuleFromAttributes","Array","inputElements","order","indexOf","sort","a","b","fn","event","addEventListener","removeEvents","ef","removeEventListener","assignedRules","dataSet","__assign","getAttribute","ruleName","toLowerCase","ruleSearchItem","assignedRule","getErrorPlacementContainers","errorPlacementTag","substr","document","getElementById","getElementsByTagName","classList","add","Constants","ValidationErrorClassName","ec","innerHTML","ErrorMessageClassName","remove","destroy","addRules","items","assignRules","assignExistingRule","inputTag","fieldTagType","toggleRule","rule","attrName","defaultValue","__webpack_exports__","_src_RuleSearchList__WEBPACK_IMPORTED_MODULE_7__","File"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,KAAAD,IAEAD,EAAA,KAAAC,IARA,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,GAAA,EAGAT,EAAAD,QA0DA,OArDAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAvB,GACA,oBAAAwB,eAAAC,aACAN,OAAAC,eAAApB,EAAAwB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAApB,EAAA,cAAiD0B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAjC,GACA,IAAAgB,EAAAhB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,mFCjFA,SAAYC,GACRA,IAAA,eACAA,IAAA,uBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,eACAA,IAAA,uBACAA,IAAA,iBACAA,IAAA,mBATJ,CAAYzC,EAAAyC,YAAAzC,EAAAyC,8FCDZ,IAAAC,EAAA,oBAAAA,KAoBA,OAdkBA,EAAAC,YAAd,SAA0BC,EAAyBC,GAC/C,IAAIC,EAAS,IAAIJ,EAIjB,OAHAI,EAAOC,QAAUF,EACjBC,EAAOF,SAAWA,EAClBE,EAAOE,SAAU,EACVF,GAGGJ,EAAAO,SAAd,SAAuBL,GACnB,IAAIE,EAAS,IAAIJ,EAGjB,OAFAI,EAAOE,SAAU,EACjBF,EAAOF,SAAWA,EACXE,GAEfJ,EApBA,GAAa1C,EAAA0C,kGCAb,IAAAQ,EAAA3C,EAAA,GAOA4C,EAAA,WAkBI,SAAAA,EAAYC,GAVL/C,KAAAuC,YAWHvC,KAAK+C,UAAYA,EA6BzB,OAvBWD,EAAAd,UAAAW,QAAP,WACI,IAIIK,EAJAC,EAAcjD,KAAKkD,MAAMC,OAAO,SAAAC,GAAK,OAAAA,EAAAC,WACzC,GAA2B,IAAvBJ,EAAYK,OACZ,OAAOT,EAAAR,iBAAiBO,SAAS5C,KAAKuC,UAI1C,IAAK,IAAInC,EAAI,EAAGA,EAAI6C,EAAYK,OAAQlD,IAAK,CACzC,IAAImD,EAAcN,EAAY7C,GAC1BoC,EAAee,EAAYf,aAC3BgB,EAAmBD,EAAYE,SAASC,MAAM1D,KAAKuC,SAAUC,GAEjE,GADAgB,EAAiBG,cAAgBJ,EAAYE,SAAS9C,MACjD6C,EAAiBb,QAAS,CAC3BK,EAAaQ,EACb,OAIR,OAAkB,MAAdR,EACOA,EAEJH,EAAAR,iBAAiBO,SAAS5C,KAAKuC,WAE9CO,EAhDA,GAAanD,EAAAmD,uFCPb,IAAAc,EAAA1D,EAAA,GACA2D,EAAA3D,EAAA,GACA2C,EAAA3C,EAAA,GAGaP,EAAAmE,iBAELC,YAAaH,EAAAxB,UAAU4B,KAAMJ,EAAAxB,UAAU6B,SAAUL,EAAAxB,UAAU8B,SAAUN,EAAAxB,UAAU+B,OAAQP,EAAAxB,UAAUgC,OAAQR,EAAAxB,UAAUiC,OACnHZ,UACI9C,KAAM,WACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAI8B,EAAMT,EAAAU,YAAYhC,EAAS,IAC/B,OAAIsB,EAAAW,cAAcF,GACPzB,EAAAR,iBAAiBC,YAAYC,EAAUC,GAE5B,MADtB8B,EAAMA,EAAIG,QAEO5B,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAU4B,KAAMJ,EAAAxB,UAAU6B,SAAUL,EAAAxB,UAAU8B,SAAUN,EAAAxB,UAAUiC,OAC/EZ,UACI9C,KAAM,YACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnB+B,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GACrC+B,EAAMA,EAAIG,OACV,IAAIE,EAAYC,SAASF,EAAQG,QAAR,cAAmC,GACxDlC,EAAU2B,EAAIhB,QAAUqB,EAG5B,OAFIhC,IACAH,EAAeA,EAAasC,QAAQ,MAAOH,EAAUI,aAClDpC,EAAUE,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAU4B,KAAMJ,EAAAxB,UAAU6B,SAAUL,EAAAxB,UAAU8B,SAAUN,EAAAxB,UAAUiC,OAC/EZ,UACI9C,KAAM,YACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnB+B,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GACrC+B,EAAMA,EAAIG,OACV,IAAIO,EAAYJ,SAASF,EAAQG,QAAR,cAAmC,GACxDlC,EAAU2B,EAAIhB,QAAU0B,EAG5B,OAFIrC,IACAH,EAAeA,EAAasC,QAAQ,MAAOE,EAAUD,aAClDpC,EAAUE,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAU6C,SAAUrB,EAAAxB,UAAU8C,OAC3CzB,UACI9C,KAAM,WACN+C,MAAA,SAAMnB,EAAyBC,GAE3B,OADcD,EAAS4C,IAAI,SAAC/B,GAAW,OAAAA,EAAAgC,UAAWjC,OAAO,SAACC,GAAe,OAAAA,IAAGE,OAAS,EACpET,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAUgC,QACvBX,UACI9C,KAAM,QACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnB8C,EAAMxB,EAAAyB,2BAA2BZ,EAAS,OAAQ,MAClDa,EAAM1B,EAAAyB,2BAA2BZ,EAAS,MAAO,MACjDJ,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GACrC,IAAIiD,EAAWC,WAAWnB,GACtB3B,EAAU0C,GAAOG,GAAYA,GAAYD,EAG7C,OAFK5C,IACDH,EAAeA,EAAasC,QAAQ,MAAOO,EAAIN,YAAYD,QAAQ,MAAOS,EAAIR,aAC3EpC,EAAUE,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAUgC,QACvBX,UACI9C,KAAM,MACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnB8C,EAAMxB,EAAAyB,2BAA2BZ,EAAS,OAAQ,MAClDJ,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GACrC,IACII,EAAU0C,GADCI,WAAWnB,GAI1B,OAFK3B,IACDH,EAAeA,EAAasC,QAAQ,MAAOO,EAAIN,aAC5CpC,EAAUE,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAUgC,QACvBX,UACI9C,KAAM,MACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnBgD,EAAM1B,EAAAyB,2BAA2BZ,EAAS,MAAO,MACjDJ,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GACrC,IACII,EADW8C,WAAWnB,IACAiB,EAG1B,OAFK5C,IACDH,EAAeA,EAAasC,QAAQ,MAAOS,EAAIR,aAC5CpC,EAAUE,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,OAKnDuB,YAAaH,EAAAxB,UAAUiC,OACvBZ,UACI9C,KAAM,QACN+C,MAAA,SAAMnB,EAAyBC,GAC3B,IAAIkC,EAAUnC,EAAS,GACnB+B,EAAMT,EAAAU,YAAYG,GACtB,GAAIb,EAAAW,cAAcF,GACd,OAAOzB,EAAAR,iBAAiBO,SAASL,GAKrC,OAF+B,MAAjB+B,EAAIoB,MADT,0JAGQ7C,EAAAR,iBAAiBO,SAASL,GACvCM,EAAAR,iBAAiBC,YAAYC,EAAUC,8TC9I3D,IAAAmD,EAAAzF,EAAA,GAEA0F,EAAA1F,EAAA,GACA2F,EAAA3F,EAAA,IACA0D,EAAA1D,EAAA,GAEA4F,EAAA5F,EAAA,IACA2D,EAAA3D,EAAA,GAIA6F,EAAA,WAqDI,SAAAA,EAAYC,GAlDFhG,KAAAiG,UAEAjG,KAAA8D,eAAwC8B,EAAA9B,eAAcoC,QAiHtDlG,KAAAmG,kBA/DNnG,KAAK0E,QAAUsB,EAEfhG,KAAKoG,WAAWJ,GAChBhG,KAAKqG,aAkQb,OAlTWN,EAAA/D,UAAAW,QAAP,WACI,GAAmB,MAAf3C,KAAKiG,QAAyC,IAAvBjG,KAAKiG,OAAO3C,OACnC,OAAO,EAGXtD,KAAKsG,WAAWtG,KAAKiG,QACrB,IAAK,IAAI7F,EAAI,EAAGA,EAAIJ,KAAKiG,OAAO3C,OAAQlD,IAAK,CACzC,IAAIoD,EAAmBxD,KAAKiG,OAAO7F,GAAGuC,UACtC,IAAKa,EAAiBb,QAElB,OADA3C,KAAKuG,UAAU/C,IACR,EAIf,OAAO,GAOJuC,EAAA/D,UAAAwE,eAAP,SAAsBC,GAClB,GAAmB,MAAfzG,KAAKiG,QAAyC,IAAvBjG,KAAKiG,OAAO3C,OACnC,OAAO,EAGXtD,KAAKsG,WAAWtG,KAAKiG,QAErB,IAAIS,EAAQ1G,KAAK2G,kBAAkBF,GACnC,GAAa,MAATC,EAEA,OADAE,QAAQC,IAAI,0CACL,EAGX,IAAIrD,EAAmBkD,EAAM/D,UAC7B,QAAKa,EAAiBb,UAClB3C,KAAKuG,UAAU/C,IACR,IAcLuC,EAAA/D,UAAAoE,WAAV,SAAqBJ,GAArB,IAAAc,EAAA9G,KACQD,EAAOC,KAEXA,KAAKiG,UAELJ,EAAAkB,iBAAiBC,QAAQ,SAAAC,SACjBC,EAAWlB,EAAgBmB,iBAAiBF,EAAQG,KAExD,GAAIH,EAAQI,OAASzD,EAAAxB,UAAU8C,OAAS+B,EAAQI,OAASzD,EAAAxB,UAAU6C,SAAU,CACzE,IAAIqC,KACA/E,EAAWsB,EAAA0D,gBAAgBL,GAS/B,IAAK,IAAIvF,KARTY,EAASyE,QAAQ,SAAAQ,GACb,IAAI7G,EAAQ6G,EAAW7G,UACI8G,IAAvBH,EAAa3G,KACb2G,EAAa3G,OAEjB2G,EAAa3G,GAAM+G,KAAKF,KAGZF,EAAc,CAE1B,IAAIK,EAAW,IAAIhC,EAAA7C,MAAMmE,EAAQI,MAE7BO,EAAQN,EAAa3F,IACzBkG,EAAAF,EAAEpF,UAASmF,KAAIhE,MAAAmE,EAAID,GAGnBD,EAAEzE,MAAQ4D,EAAKgB,8BAA8Bb,EAAQI,KAAMM,EAAEpF,SAAS,IAEtExC,EAAKkG,OAAOyB,KAAKC,QAElB,EACCpF,EAAWwF,MAAM/F,UAAUkE,MAAM3F,KAAK2G,IACjCF,QAAQ,SAAAQ,GAEb,IAAIG,EAAW,IAAIhC,EAAA7C,MAAMmE,EAAQI,MAEjCM,EAAEpF,SAASmF,KAAKF,GAGhBG,EAAEzE,MAAQ4D,EAAKgB,8BAA8Bb,EAAQI,KAAMG,GAE3DzH,EAAKkG,OAAOyB,KAAKC,QAK7B,IAAIK,EAAgBnE,EAAA0D,gBAAgBvB,EAAgBmB,iBAAiB,4BACrEnH,KAAKiG,OAAOe,QAAQ,SAAAN,GAChBA,EAAMuB,MAAQD,EAAcE,QAAQxB,EAAMnE,SAAS,MAEvDvC,KAAKiG,OAASjG,KAAKiG,OAAOkC,KAAK,SAACC,EAAGC,GAAM,OAAAD,EAAEH,MAAQI,EAAVJ,SAQnClC,EAAA/D,UAAAqE,WAAV,WACI,IAAItG,EAAOC,KACXA,KAAKiG,OAAOe,QAAQ,SAAAN,GAChBA,EAAMnE,SAASyE,QAAQ,SAAAQ,GACnB,IAAIc,EAAK,SAACC,GACNxI,EAAKyG,eAAegB,IAExBzH,EAAKoG,eAAeuB,KAAKY,GACzBd,EAAGgB,iBAAiB,SAAUF,QAKhCvC,EAAA/D,UAAAyG,aAAV,WACI,IAAI1I,EAAOC,KACXA,KAAKiG,OAAOe,QAAQ,SAAAN,GAChBA,EAAMnE,SAASyE,QAAQ,SAAAQ,GACnBzH,EAAKoG,eAAea,QAAQ,SAAA0B,GACxBlB,EAAGmB,oBAAoB,SAAUD,SAI7C1I,KAAKmG,mBAGCJ,EAAA/D,UAAA8F,8BAAV,SAAwC/E,EAAsB0D,GAE1D,IAEImC,KAEAC,EAAOC,KAAQrC,EAAY5B,SAI/B,IAAK,IAAIlD,KAFTkH,EAAQ,MAAMpC,EAAYsC,aAAa,SAAa,OAEpCF,EAIZ,GAAIA,EAAQ5G,eAAeN,IACI,IAAvBA,EAAIuG,QAAQ,OAAc,CAE1B,IAAIc,EAAWrH,EAAImD,QAAQ,MAAO,IAAImE,cAClCC,EAhBLlJ,KAgB2B8D,eAAeX,OAAO,SAAAC,GAAK,OAAAA,EAAEK,SAAS9C,OAASqI,GAAY5F,EAAEW,WAAWmE,QAAQnF,IAArD,IAAsE,GAE3H,GAAsB,MAAlBmG,EACA,SAGJ,IAAIC,GACA9F,UAAU,EACVI,SAAUyF,EAAezF,SACzBjB,aAAc,IAGG,MAAjBoG,GACAA,EAAclB,KAAKyB,GAMnC,IAAK,IAAIxH,KAAOkH,EAIZ,GAAIA,EAAQ5G,eAAeN,IACI,IAAvBA,EAAIuG,QAAQ,OAAc,CAEtBc,EAAWrH,EAAImD,QAAQ,MAAO,IAAImE,cAElB,OADhBE,EAAeP,EAAczF,OAAO,SAAAC,GAAK,OAAAA,EAAEK,SAAS9C,OAAXqI,IAA8B,MAEvEG,EAAa3G,aAAeiE,EAAYsC,aAAa,YAAYC,IAMjF,OAAOJ,GAGD7C,EAAA/D,UAAAoH,4BAAV,SAAsC1E,GAClC,IAAI2E,EAAoB3E,EAAQG,QAAR,MAExB,GAAyB,MAArBwE,EAA2B,CAC3B,GAA6B,MAAzBA,EAAkB,GAAY,CAM9B,GAJAA,EAAoBA,EAAkBC,OAAO,GAIhB,MAFDC,SAASC,eAAeH,GAGhD,KAAM,uEAAuEA,EAAiB,eAIlG,OAAQE,SAASC,eAAeH,IAEpC,OAAOxF,EAAA0D,gBAAgBgC,SAASE,qBAAqBJ,IAGzD,UAGMtD,EAAA/D,UAAAuE,UAAV,SAAoB/C,GAChBA,EAAiBjB,SAASyE,QAAQ,SAAAQ,GAC9BA,EAAGkC,UAAUC,IAAI7D,EAAA8D,UAAUC,4BAG/B7J,KAAKoJ,4BAA4B5F,EAAiBjB,SAAS,IAAIyE,QAAQ,SAAA8C,GACzD,MAANA,IACIjG,EAAAW,cAAchB,EAAiBd,WAC/Bc,EAAiBd,QAAU,iCAAiCc,EAAiBG,cAAa,WAE9FmG,EAAGC,UACC,gBAAgBjE,EAAA8D,UAAUI,sBAAqB,KAAKxG,EAAiBd,QAAO,cAKlFqD,EAAA/D,UAAAsE,WAAV,SAAqBL,GAArB,IAAAa,EAAA9G,KACIiG,EAAOe,QAAQ,SAAAN,GACXA,EAAMnE,SAASyE,QAAQ,SAAAQ,GACnBA,EAAGkC,UAAUO,OAAOnE,EAAA8D,UAAUC,0BAC9B/C,EAAKsC,4BAA4B5B,GAAIR,QAAQ,SAAA8C,GAC/B,MAANA,IACAA,EAAGC,UAAY,WAO5BhE,EAAA/D,UAAAkI,QAAP,WACIlK,KAAKsG,WAAWtG,KAAKiG,QACrBjG,KAAKyI,eACLzI,KAAKiG,UACLjG,KAAK0E,QAAU,MAGZqB,EAAA/D,UAAAmI,SAAP,SAAgBC,UACZvC,EAAA7H,KAAK8D,gBAAe4D,KAAIhE,MAAAmE,EAAIuC,GAC5BpK,KAAKiG,UACLjG,KAAKoG,WAAWpG,KAAK0E,UAGlBqB,EAAA/D,UAAAqI,YAAP,SAAmB5D,EAA0BmC,SACrClC,EAAQ1G,KAAK2G,kBAAkBF,GACnC,GAAa,MAATC,EACA,KAAM,kEAEVmB,EAAAnB,EAAMxD,OAAMwE,KAAIhE,MAAAmE,EAAIe,IAGjB7C,EAAA/D,UAAAsI,mBAAP,SAA0B7D,EAA0BuC,EAAkBxG,GAClE,GAAmB,MAAfiE,EACA,KAAM,iEAEV,IAAI8D,EAAW,cAAc9D,EAAYsC,aAAa,QAAO,IACzDyB,EAAe3E,EAAAkB,iBAAiB5D,OAAO,SAAAC,GAAK,OAAAA,EAAEgE,MAAFmD,IAAoB,GACpE,GAAoB,MAAhBC,EACA,KAAM,2DAA2DD,EAAQ,KAE7E,IAAIxH,EAAYyH,EAAanD,KACzB6B,EAAiBlJ,KAAK8D,eAAeX,OAAO,SAAAC,GAAK,OAAAA,EAAEW,WAAWmE,QAAQnF,IAAc,GAAKK,EAAEK,SAAS9C,OAAnDqI,IAAsE,GAC3H,GAAsB,MAAlBE,EACA,KAAM,uDAAuDF,EAAQ,yBAAyBjG,EAAS,KAE3G,IAAI2D,EAAQ1G,KAAK2G,kBAAkBF,GACnC,GAAa,MAATC,EACA,KAAM,wEAEVA,EAAMxD,MAAMwE,MACRjE,SAAUyF,EAAezF,SACzBjB,aAAcA,EACda,UAAU,KAIX0C,EAAA/D,UAAAyI,WAAP,SAAkBhE,EAA0BuC,EAAkB3F,GAC1D,IAAIqD,EAAQ1G,KAAK2G,kBAAkBF,GACnC,GAAa,MAATC,EAAJ,CAIA,IAAIgE,EAAOhE,EAAMxD,MAAMC,OAAO,SAAAC,GAAK,OAAAA,EAAEK,SAAS9C,OAAXqI,IAA8B,GACrD,MAAR0B,EAIJA,EAAKrH,SAAWA,EAHZuD,QAAQC,IAAI,mCAAmCmC,EAAQ,oBALvDpC,QAAQC,IAAI,sCAWVd,EAAA/D,UAAA2E,kBAAV,SAA4BF,GACxB,OAAOzG,KAAKiG,OAAO9C,OAAO,SAAAC,GAAK,OAAAA,EAAEb,SAAS2F,QAAQzB,IAAnB,IAAsC,IAE7EV,EA5TA,GAAapG,EAAAoG,sFCXApG,EAAA4H,gBAAkB,SAACL,GAC5B,OAAOa,MAAM/F,UAAUkE,MAAM3F,KAAK2G,IAGzBvH,EAAA4E,YAAc,SAACG,GAExB,OADWA,EAAgBrD,OAIlB1B,EAAA2F,2BAA6B,SAACZ,EAAsBiG,EAAkBC,GAC/E,OAAOnF,WAAWf,EAAQqE,aAAa4B,IAAaC,IAG3CjL,EAAA6E,cAAgB,SAACnD,GAC1B,OAAgB,MAATA,GAA2B,KAAVA,muBCd5BnB,EAAAQ,EAAAmK,EAAA,mCAAAC,EAAA,gGCAA,IAAAlH,EAAA1D,EAAA,GAMaP,EAAAoH,mBAELK,IAAK,uBACLC,KAAMzD,EAAAxB,UAAU6B,WAGhBmD,IAAK,uBACLC,KAAMzD,EAAAxB,UAAU6C,WAGhBmC,IAAK,oBACLC,KAAMzD,EAAAxB,UAAU8C,QAGhBkC,IAAK,mBACLC,KAAMzD,EAAAxB,UAAU4B,OAGhBoD,IAAK,oBACLC,KAAMzD,EAAAxB,UAAUiC,QAGhB+C,IAAK,mBACLC,KAAMzD,EAAAxB,UAAU2I,OAGhB3D,IAAK,qBACLC,KAAMzD,EAAAxB,UAAUgC,SAGhBgD,IAAK,SACLC,KAAMzD,EAAAxB,UAAU+B,SAGhBiD,IAAK,WACLC,KAAMzD,EAAAxB,UAAU8B,0FCzCxB,SAAY0F,GACRA,EAAA,wBACAA,EAAA,4CACAA,EAAA,sCAHJ,CAAYjK,EAAAiK,YAAAjK,EAAAiK","file":"nval.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NVal\"] = factory();\n\telse\n\t\troot[\"NVal\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","\r\nexport enum FieldType {\r\n    Text,\r\n    Password,\r\n    Number,\r\n    Email,\r\n    Textarea,\r\n    File,\r\n    Checkbox,\r\n    Radio,\r\n    Select\r\n}\r\n","export class ValidationResult {\r\n    public message: string;\r\n    public isValid: boolean;\r\n    public elements: HTMLElement[];\r\n    public errorRuleName: string;\r\n\r\n    public static createError(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.message = errorMessage;\r\n        result.elements = elements;\r\n        result.isValid = false;\r\n        return result;\r\n    }\r\n\r\n    public static createOk(elements: HTMLElement[]): ValidationResult {\r\n        var result = new ValidationResult();\r\n        result.isValid = true;\r\n        result.elements = elements;\r\n        return result;\r\n    }\r\n}\r\n","import { ValidationResult } from \"./ValidationResult\";\r\nimport {IAssignedRule} from \"./IAssignedRule\";\r\nimport {FieldType} from \"./FieldType\";\r\n\r\n/**\r\n * Field which includes one or more elements.\r\n */\r\nexport class Field {\r\n    /**\r\n     * Order of the element in the DOM.\r\n     */\r\n    public order: number;\r\n    /**\r\n     * One or more elements (> 1 in case of the same name group: checkboxes, radios).\r\n     */\r\n    public elements: HTMLElement[] = [];\r\n\r\n\r\n    public fieldType: FieldType;\r\n\r\n    /**\r\n     * Assigned rules.\r\n     */\r\n    public rules: IAssignedRule[];\r\n\r\n    constructor(fieldType: FieldType) {\r\n        this.fieldType = fieldType;\r\n    }\r\n\r\n    /**\r\n     * Validate field which includes one or more elements.\r\n     */\r\n    public isValid(): ValidationResult {\r\n        var activeRules = this.rules.filter(x => x.isActive);\r\n        if (activeRules.length === 0)\r\n            return ValidationResult.createOk(this.elements);\r\n        \r\n        var firstError: ValidationResult;\r\n\r\n        for (var i = 0; i < activeRules.length; i++) {\r\n            var ruleWrapper = activeRules[i];\r\n            var errorMessage = ruleWrapper.errorMessage;\r\n            var validationResult = ruleWrapper.instance.apply(this.elements, errorMessage);\r\n            validationResult.errorRuleName = ruleWrapper.instance.name;\r\n            if (!validationResult.isValid) {\r\n                firstError = validationResult;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (firstError != null)\r\n            return firstError;\r\n\r\n        return ValidationResult.createOk(this.elements);\r\n    }\r\n}\r\n","import { FieldType } from \"./FieldType\";\r\nimport { tryGetValue, getNumberFromAttrOrDefault, isNullOrEmpty } from \"./Util\";\r\nimport { ValidationResult } from \"./ValidationResult\";\r\nimport { IRuleSearchItem } from \"./IRuleSearchItem\";\r\n\r\nexport const ruleSearchList: IRuleSearchItem[] = [\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Select, FieldType.Number, FieldType.Email],\r\n        instance: {\r\n            name: \"required\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var val = tryGetValue(elements[0]);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createError(elements, errorMessage);\r\n                val = val.trim();\r\n                var isValid = val !== \"\";\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Email],\r\n        instance: {\r\n            name: \"minlength\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                val = val.trim();\r\n                var minLength = parseInt(element.dataset[\"valMinlength\"] || 0 as any);\r\n                var isValid = val.length >= minLength;\r\n                if(!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", minLength.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Text, FieldType.Password, FieldType.Textarea, FieldType.Email],\r\n        instance: {\r\n            name: \"maxlength\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                val = val.trim();\r\n                var maxLength = parseInt(element.dataset[\"valMaxlength\"] || 0 as any);\r\n                var isValid = val.length <= maxLength;\r\n                if(!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", maxLength.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Checkbox, FieldType.Radio],\r\n        instance: {\r\n            name: \"required\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var isValid = elements.map((x: any) => x.checked).filter((x: boolean) => x).length > 0;\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"range\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n                var max = getNumberFromAttrOrDefault(element, \"max\", 9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = min <= numValue && numValue <= max;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", min.toString()).replace(\"{1}\", max.toString());            \r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"min\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var min = getNumberFromAttrOrDefault(element, \"min\", -9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = min <= numValue;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", min.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },\r\n    {\r\n        fieldTypes: [FieldType.Number],\r\n        instance: {\r\n            name: \"max\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var max = getNumberFromAttrOrDefault(element, \"min\", 9999999999999999);\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n                var numValue = parseFloat(val);\r\n                var isValid = numValue <= max;\r\n                if (!isValid)\r\n                    errorMessage = errorMessage.replace(\"{0}\", max.toString());\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    },    \r\n    {\r\n        fieldTypes: [FieldType.Email],\r\n        instance: {\r\n            name: \"email\",\r\n            apply(elements: HTMLElement[], errorMessage: string): ValidationResult {\r\n                var element = elements[0];\r\n                var val = tryGetValue(element);\r\n                if (isNullOrEmpty(val))\r\n                    return ValidationResult.createOk(elements);\r\n\r\n                var rx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                var isValid = val.match(rx) != null;\r\n\r\n                return isValid ? ValidationResult.createOk(elements) :\r\n                    ValidationResult.createError(elements, errorMessage);\r\n            }\r\n        }\r\n    }\r\n];","import { Field } from \"./Field\";\r\nimport { IAssignedRule } from \"./IAssignedRule\";\r\nimport { ruleSearchList } from \"./RuleSearchList\";\r\nimport { fieldTagTypeList } from \"./FieldTagTypeList\";\r\nimport { FieldType } from \"./FieldType\";\r\nimport { ValidationResult } from \"./ValidationResult\";\r\nimport { Constants } from \"./Constants\";\r\nimport { nodeListToArray, isNullOrEmpty } from \"./Util\";\r\nimport { IRuleInstance } from \"./IRuleInstance\";\r\nimport { IRuleSearchItem } from \"./IRuleSearchItem\";\r\n\r\nexport class NVal {\r\n    protected element: HTMLFormElement;\r\n\r\n    protected fields: Field[] = [];\r\n\r\n    protected ruleSearchList: IRuleSearchItem[] = [...ruleSearchList];\r\n\r\n    /**\r\n     * Validate form.\r\n     */\r\n    public isValid(): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n        for (var i = 0; i < this.fields.length; i++) {\r\n            var validationResult = this.fields[i].isValid();\r\n            if (!validationResult.isValid) {\r\n                this.showError(validationResult);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate element.\r\n     * @param htmlElement\r\n     */\r\n    public isValidElement(htmlElement: HTMLElement): boolean {\r\n        if (this.fields == null || this.fields.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        this.hideErrors(this.fields);\r\n\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal+isValidElement: field not found.\");\r\n            return true;\r\n        }\r\n\r\n        var validationResult = field.isValid();\r\n        if (!validationResult.isValid) {\r\n            this.showError(validationResult);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    constructor(htmlFormElement: HTMLFormElement) {\r\n\r\n        this.element = htmlFormElement;\r\n\r\n        this.initFields(htmlFormElement);\r\n        this.initEvents();\r\n    }\r\n\r\n    protected initFields(htmlFormElement: HTMLFormElement): void {\r\n        var self = this;\r\n\r\n        this.fields = [];\r\n\r\n        fieldTagTypeList.forEach(tagType => {\r\n            var nodeList = htmlFormElement.querySelectorAll(tagType.tag);\r\n\r\n            if (tagType.type === FieldType.Radio || tagType.type === FieldType.Checkbox) {\r\n                var sameNameDict = [];\r\n                var elements = nodeListToArray(nodeList);\r\n                elements.forEach(el => {\r\n                    var name = (el as any).name;\r\n                    if (sameNameDict[name] === undefined) {\r\n                        sameNameDict[name] = [];\r\n                    }\r\n                    sameNameDict[name].push(el);\r\n                });\r\n\r\n                for (var key in sameNameDict) {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    var elGrp = sameNameDict[key];\r\n                    f.elements.push(...elGrp);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getAssignedRuleFromAttributes(tagType.type, f.elements[0]);\r\n\r\n                    self.fields.push(f);\r\n                }\r\n            } else {\r\n                var elements = Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n                elements.forEach(el => {\r\n\r\n                    var f: Field = new Field(tagType.type);\r\n\r\n                    f.elements.push(el);\r\n\r\n                    // Get rules from the first element.\r\n                    f.rules = this.getAssignedRuleFromAttributes(tagType.type, el);\r\n\r\n                    self.fields.push(f);\r\n                });\r\n            }\r\n        });\r\n\r\n        var inputElements = nodeListToArray(htmlFormElement.querySelectorAll('input, select, textarea'));\r\n        this.fields.forEach(field => {\r\n            field.order = inputElements.indexOf(field.elements[0]);\r\n        });\r\n        this.fields = this.fields.sort((a, b) => a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Need for delete events.\r\n     */\r\n    protected eventFunctions: any[] = [];\r\n\r\n    protected initEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                var fn = (event) => {\r\n                    self.isValidElement(el);\r\n                };\r\n                self.eventFunctions.push(fn);\r\n                el.addEventListener(\"change\", fn);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected removeEvents() {\r\n        var self = this;\r\n        this.fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                self.eventFunctions.forEach(ef => {\r\n                    el.removeEventListener(\"change\", ef);\r\n                });\r\n            });\r\n        });\r\n        this.eventFunctions = [];\r\n    }\r\n\r\n    protected getAssignedRuleFromAttributes(fieldType: FieldType, htmlElement: HTMLElement): IAssignedRule[] {\r\n\r\n        var self = this;\r\n\r\n        var assignedRules: IAssignedRule[] = [];\r\n\r\n        var dataSet = { ...htmlElement.dataset };\r\n\r\n        dataSet[`val${htmlElement.getAttribute(\"type\")}`] = \"true\";\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab the rules here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n                if (key.indexOf(\"val\") === 0) {\r\n\r\n                    var ruleName = key.replace(\"val\", \"\").toLowerCase();\r\n                    var ruleSearchItem = self.ruleSearchList.filter(x => x.instance.name === ruleName && x.fieldTypes.indexOf(fieldType) > -1)[0];\r\n\r\n                    if (ruleSearchItem == null) {\r\n                        continue;\r\n                    }\r\n\r\n                    var assignedRule: IAssignedRule = {\r\n                        isActive: true,\r\n                        instance: ruleSearchItem.instance,\r\n                        errorMessage: \"\"\r\n                    };\r\n\r\n                    if (assignedRules != null) {\r\n                        assignedRules.push(assignedRule);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var key in dataSet) {\r\n\r\n            // Grab error messages here.\r\n\r\n            if (dataSet.hasOwnProperty(key)) {\r\n                if (key.indexOf(\"msg\") === 0) {\r\n\r\n                    var ruleName = key.replace(\"msg\", \"\").toLowerCase();\r\n                    var assignedRule = assignedRules.filter(x => x.instance.name === ruleName)[0];\r\n                    if (assignedRule != null) {\r\n                        assignedRule.errorMessage = htmlElement.getAttribute(`data-msg-${ruleName}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return assignedRules;\r\n    }\r\n    \r\n    protected getErrorPlacementContainers(element: HTMLElement): HTMLElement[] {\r\n        var errorPlacementTag = element.dataset[\"error\"];\r\n\r\n        if (errorPlacementTag != null) {\r\n            if (errorPlacementTag[0] === \"#\") {\r\n\r\n                errorPlacementTag = errorPlacementTag.substr(1);\r\n\r\n                var errorPlacementElement = document.getElementById(errorPlacementTag);\r\n\r\n                if (errorPlacementElement == null) {\r\n                    throw `NVal+getErrorPlacementContainers: error placement element with id '#${errorPlacementTag}' not found.`;\r\n                    return [];\r\n                }\r\n\r\n                return [document.getElementById(errorPlacementTag)];\r\n            }\r\n            return nodeListToArray(document.getElementsByTagName(errorPlacementTag));\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    protected showError(validationResult: ValidationResult): void {\r\n        validationResult.elements.forEach(el => {\r\n            el.classList.add(Constants.ValidationErrorClassName);\r\n        });\r\n\r\n        this.getErrorPlacementContainers(validationResult.elements[0]).forEach(ec => {\r\n            if (ec != null) {\r\n                if (isNullOrEmpty(validationResult.message)) {\r\n                    validationResult.message = `There are no message for the '${validationResult.errorRuleName}' rule.`;\r\n                }\r\n                ec.innerHTML =\r\n                    `<span class=\"${Constants.ErrorMessageClassName}\">${validationResult.message}</span>`;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected hideErrors(fields: Field[]) {\r\n        fields.forEach(field => {\r\n            field.elements.forEach(el => {\r\n                el.classList.remove(Constants.ValidationErrorClassName);\r\n                this.getErrorPlacementContainers(el).forEach(ec => {\r\n                    if (ec != null) {\r\n                        ec.innerHTML = \"\";\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public destroy() {\r\n        this.hideErrors(this.fields);\r\n        this.removeEvents();\r\n        this.fields = [];\r\n        this.element = null;\r\n    }\r\n\r\n    public addRules(items: IRuleSearchItem[]): void {\r\n        this.ruleSearchList.push(...items);\r\n        this.fields = [];\r\n        this.initFields(this.element);\r\n    }\r\n\r\n    public assignRules(htmlElement: HTMLElement, assignedRules: IAssignedRule[]): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            throw \"NVal+assignRules: can't find HTML element for assign the rule.\";\r\n        }\r\n        field.rules.push(...assignedRules);\r\n    }\r\n\r\n    public assignExistingRule(htmlElement: HTMLElement, ruleName: string, errorMessage: string): void {\r\n        if (htmlElement == null) {\r\n            throw \"NVal+assignExistingRule: can't assign existing rule to 'null'.\";\r\n        }\r\n        var inputTag = `input[type=${htmlElement.getAttribute(\"type\")}]`;\r\n        var fieldTagType = fieldTagTypeList.filter(x => x.tag === inputTag)[0];\r\n        if (fieldTagType == null) {\r\n            throw `NVal+assignExistingRule: unrecognizable field tag type '${inputTag}'.`;\r\n        }\r\n        var fieldType = fieldTagType.type;\r\n        var ruleSearchItem = this.ruleSearchList.filter(x => x.fieldTypes.indexOf(fieldType) > -1 && x.instance.name === ruleName)[0];\r\n        if (ruleSearchItem == null) {\r\n            throw `NVal+assignExistingRule: can't find rule with name '${ruleName}' for the field type '${fieldType}'!`;\r\n        }\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            throw \"NVal+assignExistingRule: can't find HTML element for assign the rule.\";\r\n        }\r\n        field.rules.push({\r\n            instance: ruleSearchItem.instance,\r\n            errorMessage: errorMessage,\r\n            isActive: true\r\n        });\r\n    }\r\n\r\n    public toggleRule(htmlElement: HTMLElement, ruleName: string, isActive: boolean): void {\r\n        var field = this.getFieldByElement(htmlElement);\r\n        if (field == null) {\r\n            console.log(\"NVal+toggleRule: field not found.\");\r\n            return;\r\n        }\r\n        var rule = field.rules.filter(x => x.instance.name === ruleName)[0];\r\n        if (rule == null) {\r\n            console.log(`NVal+toggleRule: rule with name ${ruleName} not found.`);\r\n            return;\r\n        }\r\n        rule.isActive = isActive;\r\n    }\r\n\r\n    protected getFieldByElement(htmlElement: HTMLElement): Field {\r\n        return this.fields.filter(x => x.elements.indexOf(htmlElement) > -1)[0];\r\n    }\r\n}\r\n","export const nodeListToArray = (nodeList: NodeListOf<Element>) : HTMLElement[] => {\r\n    return Array.prototype.slice.call(nodeList) as HTMLElement[];\r\n}\r\n\r\nexport const tryGetValue = (element: HTMLElement): any => {\r\n    var val = (element as any).value;\r\n    return val;\r\n}\r\n\r\nexport const getNumberFromAttrOrDefault = (element: HTMLElement, attrName: string, defaultValue: number): number => {\r\n    return parseFloat(element.getAttribute(attrName) || defaultValue as any);\r\n}\r\n\r\nexport const isNullOrEmpty = (value: any): boolean => {\r\n    return value == null || value === \"\";\r\n}\r\n","﻿export { NVal } from \"./src/NVal\";\r\nexport { ValidationResult } from \"./src/ValidationResult\";\r\nexport { Field } from \"./src/Field\";\r\nexport { FieldType } from \"./src/FieldType\";\r\nexport { IAssignedRule } from \"./src/IAssignedRule\";\r\nexport { IRuleSearchItem } from \"./src/IRuleSearchItem\";\r\nexport { IRuleInstance } from \"./src/IRuleInstance\";\r\nexport { ruleSearchList } from \"./src/RuleSearchList\";","import {FieldType} from \"./FieldType\";\r\nimport {IFieldTagTypePair} from \"./IFieldTagTypePair\";\r\n\r\n/**\r\n * Field and tag pair list.\r\n */\r\nexport const fieldTagTypeList: IFieldTagTypePair[] = [\r\n    {\r\n        tag: \"input[type=password]\",\r\n        type: FieldType.Password\r\n    },\r\n    {\r\n        tag: \"input[type=checkbox]\",\r\n        type: FieldType.Checkbox\r\n    },\r\n    {\r\n        tag: \"input[type=radio]\",\r\n        type: FieldType.Radio\r\n    },\r\n    {\r\n        tag: \"input[type=text]\",\r\n        type: FieldType.Text\r\n    },\r\n    {\r\n        tag: \"input[type=email]\",\r\n        type: FieldType.Email\r\n    },\r\n    {\r\n        tag: \"input[type=file]\",\r\n        type: FieldType.File\r\n    },\r\n    {\r\n        tag: \"input[type=number]\",\r\n        type: FieldType.Number\r\n    },\r\n    {\r\n        tag: \"select\",\r\n        type: FieldType.Select\r\n    },\r\n    {\r\n        tag: \"textarea\",\r\n        type: FieldType.Textarea\r\n    }];\r\n","export enum Constants {\r\n    MessageAttrSuffix = \"msg\",\r\n    ValidationErrorClassName = \"validation-error\",\r\n    ErrorMessageClassName = \"error-message\"\r\n}\r\n"],"sourceRoot":""}